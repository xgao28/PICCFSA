---
title: "When and Where: Examining Crisis Service Calls in Toronto"
subtitle: "A Detailed Look at Temporal and Spatial Trends in Crisis Response Calls"
author: 
  - Xinxiang Gao
thanks: "Code and data are available at: https://github.com/xgao28/PICCFSA."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
```


# Introduction

@citeR, @tidyverse, @ggplot2, @cowplot, @gridExtra

@opendatatoronto

```{r}
data <- read.csv("../data/analysis_data/piccfsa.csv")
```


# Data {#sec-data}


```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false
#| 
ggplot(data, aes(x = event_dow, fill = event_type)) + 
  geom_bar(position = "dodge") + 
  labs(title = "Event Type Counts Grouped by Day of the Week", 
       x = "Day of the Week", 
       y = "Count",
       fill = "Event Type") +
  theme_minimal()
```

```{r}
ggplot(data, aes(x = event_month, fill = event_type)) + 
  geom_bar(position = "dodge") + 
  labs(title = "Event Type Counts Grouped by Day of the Week", 
       x = "Day of the Week", 
       y = "Count",
       fill = "Event Type") +
  theme_minimal() +
  coord_flip()
```


Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false

ggplot(data, aes(x = event_year, fill = event_type)) + 
  geom_bar(position = "dodge") + 
  labs(title = "Event Type Counts Grouped by Year", 
       x = "Year", 
       y = "Count",
       fill = "Event Type") +
  theme_minimal()
```

```{r}
df_summarized <- data %>%
  group_by(event_hour, event_type) %>%
  summarise(count = n()) %>%
  ungroup()

# Create the line plot
ggplot(df_summarized, aes(x = event_hour, y = count, color = event_type, group = event_type)) + 
  geom_line() + 
  labs(title = "Event Type Counts Grouped by Hour", 
       x = "Hour", 
       y = "Count", 
       color = "Event Type") +
  theme_minimal()
```

```{r}
library(cowplot)  # For combining plots

# Step 1: Summarize the data by counting occurrences of each event_type
df_summarized <- data %>%
  group_by(hood_158, event_type) %>%
  summarise(count = n()) %>%
  ungroup()

# Step 2: Split the summarized data into separate data frames for each event_type
event_types <- unique(df_summarized$event_type)

# Create a list to hold the top 10 data frames and plots
df_list <- list()
plot_list <- list()

for (event in event_types) {
  # Filter the top 10 neighborhoods for the current event type
  df_top10 <- df_summarized %>%
    filter(event_type == event) %>%
    arrange(desc(count)) %>%
    head(10)
  
  # Save the data frame to the list
  df_list[[event]] <- df_top10
  
  # Step 3: Create a bar plot for the top 10 neighborhoods for the current event type
  plot <- ggplot(df_top10, aes(x = reorder(hood_158, count), y = count)) + 
    geom_bar(stat = "identity") + 
    labs(title = event, 
         x = "Neighborhood 158", 
         y = "Count") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    coord_flip()
  
  # Save the plot to the list
  plot_list[[event]] <- plot
}

# Step 4: Get a look-up table
neighborhood_table <- data %>%
  select(hood_158, neighbourhood_158) %>%
  distinct() %>%
  arrange(hood_158)

# Convert the table to a grid object using gridExtra::tableGrob
table_plot <- gridExtra::tableGrob(neighborhood_table)

# Step 5: Combine the individual plots using cowplot
combined_plot <- cowplot::plot_grid(plotlist = plot_list, ncol = 1)

# Step 6: Display the combined plot
print(combined_plot)
```





\newpage


# References


